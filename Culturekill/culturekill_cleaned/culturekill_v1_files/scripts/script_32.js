self.__next_f.push([1,"26:T4c8,import * as THREE from 'three';\nimport { camera } from 'renderer';\nimport { damp } from 'maath/easing';\nimport { state } from 'state';\n\nconst SHAKE_INTENSITY = 0.02;\nconst SHAKE_DAMPING = 8;\nconst MAX_SHAKE = 0.04;\n\nexport function addCameraRotation(movementX, movementY) {\n    if (!state.cameraShake) return;\n\n    // Add the immediate mouse movement to the shake vector\n    state.cameraShake.y += movementX * SHAKE_INTENSITY;\n    state.cameraShake.x += movementY * SHAKE_INTENSITY;\n\n    // Clamp the shake to prevent it from getting out of control\n    state.cameraShake.x = THREE.MathUtils.clamp(state.cameraShake.x, -MAX_SHAKE, MAX_SHAKE);\n    state.cameraShake.y = THREE.MathUtils.clamp(state.cameraShake.y, -MAX_SHAKE, MAX_SHAKE);\n}\n\nexport function updateCameraShake(dt) {\n    if (!state.cameraShake) return;\n\n    // Smoothly dampen the shake back to zero over time\n    damp(state.cameraShake, 'x', 0, SHAKE_DAMPING, dt);\n    damp(state.cameraShake, 'y', 0, SHAKE_DAMPING, dt);\n\n    // Apply the temporary shake offset to the camera's rotation\n    // We add it here and the input system subtracts it, creating a \"lag\" effect.\n    camera.rotation.x += state.cameraShake.x;\n    camera.rotation.y += state.cameraShake.y;\n}27:T924,"])