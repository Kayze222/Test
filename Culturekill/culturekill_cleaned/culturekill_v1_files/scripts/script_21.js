self.__next_f.push([1,"import * as THREE from 'three'; // Keep THREE import if needed directly in main\nimport { setupRenderer, renderFrame, camera } from 'renderer'; // Import camera\nimport { setupInput } from 'input';\nimport { state } from 'state';\nimport { setupPhysicsSystem, updatePhysicsSystem } from 'simplePhysicsSystem'; // Import setup function\nimport { loadCollisionWorld } from 'collisionWorld';\nimport { loadGun, updateGunAnimation, gunModel } from 'gun'; // Import gun loader AND update function\nimport { loadSword, updateSwordAnimation, swordModel } from 'sword';\nimport { setupZombies, updateZombies } from 'zombie';\nimport { setupParticles, updateParticles } from 'particles';\nimport { setupMusic, updateMusic, MuteManager } from 'musicManager';\nimport { setupPlayerMusic } from 'playerMusic';\nimport { setupAmmo, updateAmmo } from 'ammo';\nimport Stats from 'three/addons/libs/stats.module.js'; // Keep Stats import\nimport { applyUpgrade } from 'upgrades';\nimport { setMasterVolume } from 'audio';\n// Initial Setup\nsetupInput(camera); // Pass camera to input setup\nconst { renderer } = setupRenderer(); // Destructure renderer\nsetupPhysicsSystem(); // Setup physics system\nloadCollisionWorld('https://threejs.org/examples/models/gltf/collision-world.glb');\nloadGun(); // Load the gun model\nloadSword(); // Load the sword model\nsetupZombies();\nsetupParticles();\nsetupMusic();\nsetupPlayerMusic();\nsetupAmmo();\n// Stats Panel\nconst stats = new Stats();\nstats.domElement.style.position = 'absolute';\nstats.domElement.style.top = '0px';\nstats.domElement.style.left = '0px'; // Position top-left\ndocument.getElementById('renderDiv').appendChild(stats.domElement);\n// --- Add Score Display ---\nconst scoreElement = document.createElement('div');\nscoreElement.id = 'score-display';\nscoreElement.style.position = 'absolute';\nscoreElement.style.top = '10px';\nscoreElement.style.left = '100px';\nscoreElement.style.color = 'white';\nscoreElement.style.fontFamily = `'RetroByte', sans-serif`;\nscoreElement.style.fontSize = '24px';\nscoreElement.style.fontWeight = '700';\nscoreElement.style.textShadow = '2px 2px 4px rgba(0,0,0,0.8)';\nscoreElement.textContent = 'Score: 0';\ndocument.body.appendChild(scoreElement);\n// --- Add Ammo Display ---\nconst ammoElement = document.createElement('div');\nammoElement.id = 'ammo-display';\nObject.assign(ammoElement.style, {\n    position: 'absolute',\n    bottom: '20px',\n    right: '20px',\n    color: 'white',\n    fontFamily: `'RetroByte', sans-serif`,\n    fontSize: '24px',\n    fontWeight: '700',\n    textShadow: '2px 2px 4px rgba(0,0,0,0.8)',\n    zIndex: '100', // Ensure it's above other elements if needed\n});\ndocument.body.appendChild(ammoElement);\n// --- End Ammo Display ---\n// --- Add Health Bar ---\nconst healthBarContainer = document.createElement('div');\nObject.assign(healthBarContainer.style, {\n    position: 'absolute',\n    bottom: '60px', // Position above ammo display\n    right: '20px',\n    width: '200px',\n    height: '20px',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    border: '2px solid white',\n    borderRadius: '5px',\n    zIndex: '100',\n});\nconst healthBar = document.createElement('div');\nhealthBar.id = 'health-bar';\nObject.assign(healthBar.style, {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#dc3545', // Red color for health\n    borderRadius: '3px',\n    transition: 'width 0.2s ease-in-out', // Smooth transition on damage\n});\nhealthBarContainer.appendChild(healthBar);\ndocument.body.appendChild(healthBarContainer);\n// --- End Health Bar ---\n// --- Add Jetpack Fuel Bar ---\nconst jetpackFuelBarContainer = document.createElement('div');\njetpackFuelBarContainer.id = 'jetpack-fuel-container';\nObject.assign(jetpackFuelBarContainer.style, {\n    position: 'absolute',\n    bottom: '90px', // Position above health bar\n    right: '20px',\n    width: '200px',\n    height: '15px',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    border: '2px solid white',\n    borderRadius: '5px',\n    zIndex: '100',\n    display: 'none', // Hidden until jetpack is unlocked\n});\nconst jetpackFuelBar = document.createElement('div');\njetpackFuelBar.id = 'jetpack-fuel-bar';\nObject.assign(jetpackFuelBar.style, {\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#00ffff', // Cyan/aqua color for fuel\n    borderRadius: '3px',\n    transition: 'width 0.1s linear',\n});\njetpackFuelBarContainer.appendChild(jetpackFuelBar);\ndocument.body.appendChild(jetpackFuelBarContainer);\n// --- End Jetpack Fuel Bar ---\n// --- Add Crosshair ---\nconst crosshairSize = '20px';\nconst crosshairColor = 'rgba(255, 255, 255, 0.8)';\nconst crosshairThickness = '2px';\nconst style = document.createElement('style');\nstyle.textContent = `\n  @font-face {\n    font-family: 'RetroByte';\n    src: url('https://play.rosebud.ai/assets/RetroByte.ttf?2x8E') format('truetype');\n  }\n  .crosshair {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: ${crosshairSize};\n    height: ${crosshairSize};\n    pointer-events: none; /* Allow clicks to pass through */\n    z-index: 10; /* Ensure it's above the canvas */\n  }\n  .crosshair::before,\n  .crosshair::after {\n    content: '';\n    position: absolute;\n    background-color: ${crosshairColor};\n    box-shadow: 0 0 5px rgba(0,0,0,0.5); /* Optional shadow for visibility */\n  }\n  .crosshair::before { /* Vertical line */\n    left: 50%;\n    top: 0;\n    width: ${crosshairThickness};\n    height: 100%;\n    transform: translateX(-50%);\n  }\n  .crosshair::after { /* Horizontal line */\n    top: 50%;\n    left: 0;\n    width: 100%;\n    height: ${crosshairThickness};\n    transform: translateY(-50%);\n  }\n`;\ndocument.head.appendChild(style);\nconst crosshairElement = document.createElement('div');\ncrosshairElement.className = 'crosshair';\ndocument.body.appendChild(crosshairElement);\n// --- End Crosshair ---\n// --- Add Damage Flash ---\nconst damageFlashElement = document.createElement('div');\ndamageFlashElement.id = 'damage-flash';\nObject.assign(damageFlashElement.style, {\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(255, 0, 0, 0)',\n    pointerEvents: 'none', // Make sure it doesn't intercept clicks\n    zIndex: '15', // Should be above game, below UI like game over screen\n    transition: 'background-color 0.1s ease-out', // Smooth fade-out\n});\ndocument.body.appendChild(damageFlashElement);\n// --- End Damage Flash ---\n// --- Add Game Over Screen ---\nconst gameOverElement = document.createElement('div');\ngameOverElement.id = 'game-over-screen';\nObject.assign(gameOverElement.style, {\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.75)',\n    color: 'white',\n    display: 'none',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontFamily: `'RetroByte', sans-serif`,\n    textAlign: 'center',\n    zIndex: '20',\n});\ngameOverElement.innerHTML = `\n    \u003ch1 style=\"font-size: 4rem; margin-bottom: 20px; text-shadow: 3px 3px 8px rgba(255,0,0,0.7);\"\u003eGame Over\u003c/h1\u003e\n    \u003cp id=\"final-score\" style=\"font-size: 2rem; margin-bottom: 40px;\"\u003e\u003c/p\u003e\n    \u003cdiv style=\"display: flex; gap: 20px;\"\u003e\n        \u003cbutton id=\"restart-button\" style=\"padding: 15px 30px; font-size: 1.5rem; color: white; background-color: #dc3545; border: none; border-radius: 5px; cursor: pointer;\"\u003eRestart\u003c/button\u003e\n        \u003cbutton id=\"game-over-settings-button\" style=\"padding: 15px 30px; font-size: 1.5rem; color: white; background-color: #333; border: 1px solid white; border-radius: 5px; cursor: pointer;\"\u003eSettings\u003c/button\u003e\n    \u003c/div\u003e\n`;\ndocument.body.appendChild(gameOverElement);\ndocument.getElementById('restart-button').addEventListener('click', () =\u003e {\n    window.location.reload();\n});\ndocument.getElementById('game-over-settings-button').addEventListener('click', () =\u003e {\n    state.isSettingsVisible = true;\n    gameOverElement.style.display = 'none'; // Hide game over screen\n});\nfunction showGameOverScreen() {\n    document.getElementById('final-score').textContent = `Your Score: ${state.score}`;\n    gameOverElement.style.display = 'flex';\n    document.exitPointerLock();\n}\n// --- End Game Over Screen ---\n// --- Add Pause Menu ---\nconst pauseMenuElement = document.createElement('div');\npauseMenuElement.id = 'pause-menu';\nObject.assign(pauseMenuElement.style, {\n    position: 'fixed', top: '0', left: '0', width: '100%', height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.75)', color: 'white',\n    display: 'none', flexDirection: 'column', justifyContent: 'center', alignItems: 'center',\n    fontFamily: `'RetroByte', sans-serif`, zIndex: '30',\n});\npauseMenuElement.innerHTML = `\n    \u003ch1 style=\"font-size: 4rem; text-shadow: 3px 3px 8px rgba(0,255,255,0.7);\"\u003ePAUSED\u003c/h1\u003e\n    \u003cdiv style=\"display: flex; flex-direction: column; gap: 20px; margin-top: 2rem;\"\u003e\n        \u003cbutton id=\"resume-button\" style=\"padding: 15px 30px; font-size: 1.5rem; color: black; background-color: #00ffff; border: none; border-radius: 5px; cursor: pointer;\"\u003eResume\u003c/button\u003e\n        \u003cbutton id=\"pause-settings-button\" style=\"padding: 15px 30px; font-size: 1.5rem; color: white; background-color: #333; border: 1px solid white; border-radius: 5px; cursor: pointer;\"\u003eSettings\u003c/button\u003e\n        \u003cbutton id=\"pause-main-menu-button\" style=\"padding: 15px 30px; font-size: 1.5rem; color: white; background-color: #dc3545; border: none; border-radius: 5px; cursor: pointer;\"\u003eMain Menu\u003c/button\u003e\n    \u003c/div\u003e\n`;\ndocument.body.appendChild(pauseMenuElement);\ndocument.getElementById('resume-button').addEventListener('click', () =\u003e {\n    state.isGamePaused = false;\n    state.isPauseMenuVisible = false;\n    document.body.requestPointerLock();\n});\ndocument.getElementById('pause-main-menu-button').addEventListener('click', () =\u003e {\n    window.location.reload();\n});\ndocument.getElementById('pause-settings-button').addEventListener('click', () =\u003e {\n    state.isPauseMenuVisible = false;\n    state.isSettingsVisible = true;\n});\n// --- Add Upgrade Screen ---\nconst upgradeScreenElement = document.createElement('div');\nupgradeScreenElement.id = 'upgrade-screen';\nObject.assign(upgradeScreenElement.style, {\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.85)',\n    color: 'white',\n    display: 'none',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontFamily: `'RetroByte', sans-serif`,\n    textAlign: 'center',\n    zIndex: '25',\n});\nupgradeScreenElement.innerHTML = `\n    \u003ch1 style=\"font-size: 3rem; margin-bottom: 40px; text-shadow: 3px 3px 8px rgba(0,255,255,0.7);\"\u003eCHOOSE YOUR UPGRADE\u003c/h1\u003e\n    \u003cdiv id=\"upgrade-options\" style=\"display: flex; gap: 30px;\"\u003e\u003c/div\u003e\n`;\ndocument.body.appendChild(upgradeScreenElement);\nfunction showUpgradeScreen() {\n    const optionsContainer = document.getElementById('upgrade-options');\n    optionsContainer.innerHTML = ''; // Clear previous options\n    state.upgradesToShow.forEach(upgrade =\u003e {\n        const button = document.createElement('button');\n        button.className = 'upgrade-button';\n        button.style.cssText = `\n            padding: 20px 30px;\n            font-size: 1.2rem;\n            color: white;\n            background-color: #1a1a1a;\n            border: 2px solid #00ffff;\n            border-radius: 10px;\n            cursor: pointer;\n            width: 250px;\n            text-align: left;\n            transition: all 0.2s ease;\n        `;\n        button.innerHTML = `\n            \u003ch3 style=\"margin: 0 0 10px 0; color: #00ffff;\"\u003e${upgrade.name}\u003c/h3\u003e\n            \u003cp style=\"margin: 0; font-size: 1rem; color: #cccccc;\"\u003e${upgrade.description}\u003c/p\u003e\n        `;\n        // Add hover effect via JS\n        button.onmouseenter = () =\u003e {\n            button.style.backgroundColor = '#00ffff';\n            button.style.color = 'black';\n            button.querySelector('h3').style.color = 'black';\n            button.querySelector('p').style.color = '#333333';\n        };\n        button.onmouseleave = () =\u003e {\n            button.style.backgroundColor = '#1a1a1a';\n            button.style.color = 'white';\n            button.querySelector('h3').style.color = '#00ffff';\n            button.querySelector('p').style.color = '#cccccc';\n        };\n        button.onclick = () =\u003e {\n            applyUpgrade(upgrade.id);\n            hideUpgradeScreen();\n        };\n        optionsContainer.appendChild(button);\n    });\n    upgradeScreenElement.style.display = 'flex';\n}\nfunction hideUpgradeScreen() {\n    upgradeScreenElement.style.display = 'none';\n    // Re-lock the pointer after selection to continue playing\n    document.body.requestPointerLock();\n}\n// --- End Upgrade Screen ---\n// --- Add Main Menu ---\nconst mainMenuElement = document.createElement('div');\nmainMenuElement.id = 'main-menu';\nObject.assign(mainMenuElement.style, {\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.9)',\n    color: 'white',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontFamily: `'RetroByte', sans-serif`,\n    zIndex: '50',\n});\nmainMenuElement.innerHTML = `\n    \u003ch1 style=\"font-size: 5rem; text-shadow: 4px 4px 12px rgba(0,255,255,0.7); margin-bottom: 1.5rem;\"\u003eCULTUREKILL\u003c/h1\u003e\n    \u003cbutton id=\"start-game-button\" style=\"padding: 20px 40px; font-size: 2rem; color: black; background-color: #00ffff; border: none; border-radius: 10px; cursor: pointer; text-transform: uppercase; margin-bottom: 2.5rem;\"\u003eStart Game\u003c/button\u003e\n    \u003cbutton id=\"main-menu-settings-button\" style=\"padding: 15px 30px; font-size: 1.5rem; color: white; background-color: #333; border: 1px solid white; border-radius: 5px; cursor: pointer;\"\u003eSettings\u003c/button\u003e\n`;\ndocument.body.appendChild(mainMenuElement);\n// --- Add Reusable Settings Panel ---\nconst settingsPanelElement = document.createElement('div');\nsettingsPanelElement.id = 'settings-panel';\nObject.assign(settingsPanelElement.style, {\n    position: 'fixed', top: '0', left: '0', width: '100%', height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.85)', color: 'white',\n    display: 'none', flexDirection: 'column', justifyContent: 'center', alignItems: 'center',\n    fontFamily: `'RetroByte', sans-serif`, zIndex: '40',\n});\nsettingsPanelElement.innerHTML = `\n    \u003cdiv style=\"background-color: rgba(255,255,255,0.05); padding: 35px; border-radius: 10px; width: 450px; display: flex; flex-direction: column; gap: 20px;\"\u003e\n        \u003ch2 style=\"text-align: center; margin-top: 0; margin-bottom: 25px; font-size: 2rem; text-shadow: 2px 2px 6px rgba(0,255,255,0.7);\"\u003eSETTINGS\u003c/h2\u003e\n        \u003cdiv class=\"setting-row\" style=\"display: flex; justify-content: space-between; align-items: center; font-size: 1.1rem;\"\u003e\n            \u003clabel for=\"settings-master-volume\"\u003eMaster Volume\u003c/label\u003e\n            \u003cinput type=\"range\" id=\"settings-master-volume\" min=\"0\" max=\"1\" step=\"0.01\" value=\"${state.masterVolume}\" style=\"width: 220px;\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"setting-row\" style=\"display: flex; justify-content: space-between; align-items: center; font-size: 1.1rem;\"\u003e\n            \u003clabel for=\"settings-sensitivity\"\u003eMouse Sensitivity\u003c/label\u003e\n            \u003cinput type=\"range\" id=\"settings-sensitivity\" min=\"0.1\" max=\"3\" step=\"0.1\" value=\"${state.mouseSensitivity}\" style=\"width: 220px;\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"setting-row\" style=\"border-top: 1px solid rgba(255,255,255,0.2); padding-top: 20px; margin-top: 10px;\"\u003e\n            \u003ch4 style=\"margin: 0 0 10px 0; text-align: center;\"\u003eCustom Music\u003c/h4\u003e\n            \u003cinput type=\"file\" id=\"mp3-upload\" accept=\".mp3\" style=\"margin-bottom: 10px; width: 100%;\"\u003e\n            \u003cdiv id=\"track-name\" style=\"height: 20px; font-style: italic; text-align: center; margin-bottom: 10px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;\"\u003eNo track selected\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cbutton id=\"settings-back-button\" style=\"padding: 15px 30px; font-size: 1.2rem; color: black; background-color: #00ffff; border: none; border-radius: 5px; cursor: pointer; margin-top: 20px;\"\u003eBack\u003c/button\u003e\n    \u003c/div\u003e\n`;\ndocument.body.appendChild(settingsPanelElement);\ndocument.getElementById('start-game-button').addEventListener('click', () =\u003e {\n    mainMenuElement.style.display = 'none';\n    state.isGameStarted = true;\n    document.body.requestPointerLock();\n});\ndocument.getElementById('main-menu-settings-button').addEventListener('click', () =\u003e {\n    state.isSettingsVisible = true;\n});\ndocument.getElementById('settings-master-volume').addEventListener('input', (e) =\u003e {\n    const volume = parseFloat(e.target.value);\n    state.masterVolume = volume;\n    setMasterVolume(volume);\n    MuteManager.setMuted(false);\n});\ndocument.getElementById('settings-sensitivity').addEventListener('input', (e) =\u003e {\n    state.mouseSensitivity = parseFloat(e.target.value);\n});\ndocument.getElementById('settings-back-button').addEventListener('click', () =\u003e {\n    state.isSettingsVisible = false;\n    // When coming from the main menu, the game hasn't started, so we don't need special logic\n    // When coming from the pause menu, the loop will handle showing it again.\n    if (state.isGamePaused) {\n        state.isPauseMenuVisible = true;\n    } else if (state.isGameOver) {\n        // If the game is over, show the game over screen again\n        gameOverElement.style.display = 'flex';\n    }\n});\n// --- End Main Menu ---\n// Main Loop\nfunction loop() {\n    if (!state.isGameStarted) {\n        // Only render and update stats before game starts\n        renderFrame(renderer);\n        stats.update();\n        requestAnimationFrame(loop);\n        return;\n    }\n    if (state.isGameOver) {\n        if (gameOverElement.style.display === 'none') {\n            showGameOverScreen();\n        }\n        renderFrame(renderer);\n        stats.update();\n        requestAnimationFrame(loop);\n        return;\n    }\n    \n    if (state.isUpgradeScreenVisible \u0026\u0026 upgradeScreenElement.style.display === 'none') {\n        showUpgradeScreen();\n    }\n    // Handle Pause Menu visibility\n    pauseMenuElement.style.display = state.isPauseMenuVisible ? 'flex' : 'none';\n    // Handle Settings Panel visibility\n    settingsPanelElement.style.display = state.isSettingsVisible ? 'flex' : 'none';\n    // Hide main menu if settings are open from it\n    mainMenuElement.style.display = (!state.isGameStarted \u0026\u0026 !state.isSettingsVisible) ? 'flex' : 'none';\n    if (state.isGamePaused || state.isSettingsVisible) { // Pause if settings are open too\n        // Only update things that should run while paused\n        stats.update();\n        requestAnimationFrame(loop);\n        return;\n    }\n    const dt = Math.min(0.05, state.clock.getDelta()); // Use state's clock\n    updatePhysicsSystem(dt);\n    updateGunAnimation(dt); // Update gun animation each frame\n    updateSwordAnimation(dt); // Update sword animation each frame\n    // Handle weapon visibility\n    if (gunModel \u0026\u0026 swordModel) {\n        const isGunActive = state.activeWeapon === 'gun';\n        gunModel.visible = isGunActive;\n        swordModel.visible = !isGunActive;\n        // Show/hide UI elements based on active weapon\n        crosshairElement.style.display = isGunActive ? 'block' : 'none';\n        ammoElement.style.display = isGunActive ? 'block' : 'none';\n    }\n    updateZombies(dt);\n    updateParticles(dt);\n    updateMusic(dt); // Update music based on game state\n    updateAmmo(dt);\n    // Update Ammo UI\n    if (state.infiniteAmmoActive) {\n        ammoElement.textContent = `Ammo: ∞ (${Math.ceil(state.infiniteAmmoTimer)}s)`;\n    } else {\n        ammoElement.textContent = `Ammo: ${state.ammo}`;\n    }\n    // Update Health Bar UI\n    const healthPercentage = (state.playerHealth / state.maxPlayerHealth) * 100;\n    healthBar.style.width = `${healthPercentage}%`;\n    // Update Jetpack Fuel Bar UI\n    if (state.jetpackUnlocked) {\n        jetpackFuelBarContainer.style.display = 'block';\n        const fuelPercentage = (state.jetpackFuel / state.maxJetpackFuel) * 100;\n        jetpackFuelBar.style.width = `${fuelPercentage}%`;\n    }\n    // Update Damage Flash\n    if (state.damageFlash \u003e 0) {\n        state.damageFlash -= dt * 2; // Fade out speed\n        damageFlashElement.style.backgroundColor = `rgba(255, 0, 0, ${state.damageFlash})`;\n    } else {\n        damageFlashElement.style.backgroundColor = 'rgba(255, 0, 0, 0)';\n    }\n    // Update Timers\n    if (state.infiniteAmmoActive) {\n        state.infiniteAmmoTimer -= dt;\n        if (state.infiniteAmmoTimer \u003c= 0) {\n            state.infiniteAmmoActive = false;\n        }\n    }\n    // Regenerate Jetpack Fuel\n    if (state.jetpackUnlocked \u0026\u0026 state.physics.playerOnFloor \u0026\u0026 state.jetpackFuel \u003c state.maxJetpackFuel) {\n        state.jetpackFuel += 20 * dt; // Regenerate fuel when on the ground\n        if (state.jetpackFuel \u003e state.maxJetpackFuel) state.jetpackFuel = state.maxJetpackFuel;\n    }\n    renderFrame(renderer); // Pass renderer\n    stats.update(); // Update stats\n    state.events.length = 0; // Clear one-frame events (if used later)\n    requestAnimationFrame(loop);\n}\n// Start the loop\nloop();"])