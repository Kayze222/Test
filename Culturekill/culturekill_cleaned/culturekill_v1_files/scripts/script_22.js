self.__next_f.push([1,"1d:T6fa,import { state } from 'state';\nimport { scene } from 'renderer'; // Import scene from renderer\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OctreeHelper } from 'three/addons/helpers/OctreeHelper.js';\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js'; // Import GUI\n\nexport function loadCollisionWorld(url) {\n  new GLTFLoader().load(url, g =\u003e { // Changed gltf to g to avoid shadow variable name\n    g.scene.scale.set(2, 2, 2); // Scale up the world\n    scene.add(g.scene); // Use imported scene\n    // Ensure physics is initialized before using it\n    if (state.physics) {\n      state.physics.loadEnvironment(g.scene);\n\n      // Add Octree helper for debugging\n      const helper = new OctreeHelper( state.physics.worldOctree );\n      helper.visible = false;\n      scene.add( helper );\n\n      // Add GUI control for helper visibility\n      const gui = new GUI( { width: 200, container: document.getElementById('renderDiv') } ); // Specify container\n      gui.domElement.style.position = 'absolute'; // Position GUI\n      gui.domElement.style.top = '10px';\n      gui.domElement.style.right = '10px';\n      gui.add( { debug: false }, 'debug' )\n          .name( 'Octree Helper' ) // Give it a name\n          .onChange( function ( value ) {\n              helper.visible = value;\n          } );\n\n    } else {\n      console.error(\"Physics system not ready for collision world loading.\");\n    }\n\n    g.scene.traverse(c =\u003e {\n      if (c.isMesh) {\n        c.castShadow = c.receiveShadow = true;\n        if (c.material.map) c.material.map.anisotropy = 4; // Use anisotropy if map exists\n      }\n    });\n  },\n  undefined, // Progress callback (optional)\n  (error) =\u003e { // Error callback\n      console.error('Error loading collision world:', error);\n  });\n}1e:T9fe,"])