self.__next_f.push([1,"import * as THREE from 'three';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { scene } from 'renderer';\nimport { state } from 'state';\n\nconst AMMO_BOX_URL = 'https://play.rosebud.ai/assets/Ammo box.glb?f3JK';\nlet ammoBoxModel = null;\nexport const activeAmmoBoxes = [];\nconst AMMO_PER_BOX = 15;\nconst SPAWN_RADIUS = 40; // Doubled for larger map\nconst RESPAWN_TIME = 10; // seconds\nlet respawnTimer = 0;\n\nexport function setupAmmo() {\n    const loader = new GLTFLoader();\n    loader.load(AMMO_BOX_URL, (gltf) =\u003e {\n        ammoBoxModel = gltf.scene;\n        ammoBoxModel.traverse(child =\u003e {\n            if (child.isMesh) {\n                child.castShadow = true;\n                child.receiveShadow = true;\n            }\n        });\n        console.log('Ammo box model loaded.');\n        // Spawn a few boxes to start\n        for (let i = 0; i \u003c 3; i++) {\n            spawnAmmoBox();\n        }\n    }, undefined, (error) =\u003e {\n        console.error('Error loading ammo box model:', error);\n    });\n}\n\nfunction spawnAmmoBox() {\n    if (!ammoBoxModel) return;\n    const newBoxMesh = ammoBoxModel.clone();\n    // Spawn at a random position within the spawn radius\n    // Spawn in a random square area instead of just on a circle's edge\n    const x = (Math.random() - 0.5) * SPAWN_RADIUS * 1.8;\n    const z = (Math.random() - 0.5) * SPAWN_RADIUS * 1.8;\n    newBoxMesh.position.set(x, 0.5, z);\n    newBoxMesh.scale.set(0.5, 0.5, 0.5);\n    scene.add(newBoxMesh);\n    const boxData = {\n        mesh: newBoxMesh,\n        collider: new THREE.Sphere(newBoxMesh.position, 1.5) // Collision radius\n    };\n    \n    activeAmmoBoxes.push(boxData);\n}\n// This function will be used later to manage ammo box interactions\nexport function updateAmmo(dt) {\n    const playerPosition = state.physics?.playerCollider?.end;\n    if (!playerPosition) return;\n    // Check for pickup collisions\n    for (let i = activeAmmoBoxes.length - 1; i \u003e= 0; i--) {\n        const box = activeAmmoBoxes[i];\n        box.mesh.rotation.y += dt * 0.5; // Keep the rotation effect\n        const distance = playerPosition.distanceTo(box.collider.center);\n        if (distance \u003c box.collider.radius) {\n            // Player picked up ammo\n            state.ammo = Math.min(state.maxAmmo, state.ammo + AMMO_PER_BOX);\n            \n            // Remove box from scene and active list\n            scene.remove(box.mesh);\n            activeAmmoBoxes.splice(i, 1);\n            \n            // Maybe play a pickup sound here later\n        }\n    }\n    \n    // Respawn logic\n    if (activeAmmoBoxes.length \u003c 3) { // Maintain at least 3 boxes\n        respawnTimer -= dt;\n        if (respawnTimer \u003c= 0) {\n            spawnAmmoBox();\n            respawnTimer = RESPAWN_TIME * (Math.random() * 0.5 + 0.75); // Reset with slight randomness\n        }\n    }\n}"])