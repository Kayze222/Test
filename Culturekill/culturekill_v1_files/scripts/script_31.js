self.__next_f.push([1,"import { state } from 'state';\nlet audioContext;\nlet masterGain;\nfunction initAudio() {\n    // Only run once\n    if (audioContext) return;\n    try {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        masterGain = audioContext.createGain();\n        masterGain.gain.value = state.masterVolume; // Use volume from state\n        masterGain.connect(audioContext.destination);\n    } catch (e) {\n        console.error(\"Web Audio API is not supported in this browser\");\n    }\n}\n\n// Call initAudio on the first user interaction to enable audio\ndocument.body.addEventListener('mousedown', initAudio, { once: true });\n\n// Creates a sharp, laser-like \"pew\" sound\nexport function playGunshotSound() {\n    if (!audioContext) return;\n\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    oscillator.connect(gainNode);\n    gainNode.connect(masterGain);\n\n    const now = audioContext.currentTime;\n    oscillator.type = 'sawtooth';\n    oscillator.frequency.setValueAtTime(600, now);\n    oscillator.frequency.exponentialRampToValueAtTime(100, now + 0.1);\n\n    gainNode.gain.setValueAtTime(1, now);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.15);\n\n    oscillator.start(now);\n    oscillator.stop(now + 0.2);\n}\n\n// Creates a crunchy, noise-based explosion sound\nexport function playExplosionSound() {\n    if (!audioContext) return;\n\n    const bufferSize = audioContext.sampleRate * 0.5; // Half-second buffer\n    const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);\n    const output = buffer.getChannelData(0);\n\n    // Fill buffer with white noise\n    for (let i = 0; i \u003c bufferSize; i++) {\n        output[i] = Math.random() * 2 - 1;\n    }\n\n    const noiseSource = audioContext.createBufferSource();\n    noiseSource.buffer = buffer;\n\n    const filter = audioContext.createBiquadFilter();\n    filter.type = 'lowpass';\n    filter.frequency.setValueAtTime(800, audioContext.currentTime);\n    filter.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.4);\n    \n    const gainNode = audioContext.createGain();\n    \n    noiseSource.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(masterGain);\n    \n    const now = audioContext.currentTime;\n    gainNode.gain.setValueAtTime(0.8, now);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.4);\n\n    noiseSource.start(now);\n    noiseSource.stop(now + 0.5);\n}\n// Creates a low thud sound for player taking damage\nexport function playPlayerDamageSound() {\n    if (!audioContext) return;\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    oscillator.connect(gainNode);\n    gainNode.connect(masterGain);\n    const now = audioContext.currentTime;\n    oscillator.type = 'square'; // Square wave for a harsh, digital sound\n    oscillator.frequency.setValueAtTime(120, now); // Low pitch\n    oscillator.frequency.exponentialRampToValueAtTime(40, now + 0.15); // Pitch drops quickly\n    gainNode.gain.setValueAtTime(0.6, now); // Start loud\n    gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.15); // Fade out quickly\n    oscillator.start(now);\n    oscillator.stop(now + 0.2);\n}\n// Creates a whoosh sound for the sword swing\nexport function playSwordSwingSound() {\n    if (!audioContext) return;\n    \n    const bufferSize = audioContext.sampleRate * 0.3;\n    const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);\n    const output = buffer.getChannelData(0);\n    for (let i = 0; i \u003c bufferSize; i++) {\n        output[i] = (Math.random() * 2 - 1) * (1 - i / bufferSize); // Fading white noise\n    }\n    const noiseSource = audioContext.createBufferSource();\n    noiseSource.buffer = buffer;\n    const filter = audioContext.createBiquadFilter();\n    filter.type = 'bandpass';\n    filter.frequency.setValueAtTime(1000, audioContext.currentTime);\n    filter.frequency.exponentialRampToValueAtTime(4000, audioContext.currentTime + 0.2);\n    filter.Q.value = 5;\n    \n    const gainNode = audioContext.createGain();\n    gainNode.gain.setValueAtTime(0.5, audioContext.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.25);\n    noiseSource.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(masterGain);\n    noiseSource.start();\n    noiseSource.stop(audioContext.currentTime + 0.3);\n}\nexport function setMasterVolume(volume) {\n    if (masterGain) {\n        // Use a logarithmic curve for a more natural feel\n        const db = -40 * (1 - volume); // Convert linear 0-1 to dB range approx -40 to 0\n        masterGain.gain.setTargetAtTime(Math.pow(10, db / 20), audioContext.currentTime, 0.01);\n    }\n}"])