self.__next_f.push([1,"import { activeZombies } from 'zombie';\n\nconst TRACK1_URL = 'https://play.rosebud.ai/assets/track1.mp3?6Ivy'; // Calm track\nconst TRACK2_URL = 'https://play.rosebud.ai/assets/track2.mp3?O7cl'; // Intense track\n\nconst FADE_TIME = 1.5; // seconds to fade between tracks\nconst INTENSITY_THRESHOLD = 3; // Number of zombies to trigger intense music\n\nlet music1, music2;\nlet activeTrack = null;\nlet desiredTrack = null;\nlet musicInitialized = false;\nlet isGloballyMuted = false;\n\nfunction initializeMusic() {\n    if (musicInitialized) return;\n\n    music1 = new Audio(TRACK1_URL);\n    music1.loop = true;\n    music1.volume = 0;\n\n    music2 = new Audio(TRACK2_URL);\n    music2.loop = true;\n    music2.volume = 0;\n\n    // Start playing both tracks. They are silent until volume is increased.\n    music1.play().catch(e =\u003e console.log(\"User interaction needed to play audio.\"));\n    music2.play().catch(e =\u003e console.log(\"User interaction needed to play audio.\"));\n    \n    // Set the initial desired track\n    desiredTrack = music1;\n    activeTrack = music1;\n    \n    musicInitialized = true;\n    console.log(\"Music system initialized.\");\n}\n\n// This needs to be called after a user interaction, like a click\nexport function setupMusic() {\n    document.body.addEventListener('mousedown', initializeMusic, { once: true });\n}\n\n// Allows external modules to mute/unmute the built-in soundtrack\nexport const MuteManager = {\n    setMuted: (muted) =\u003e {\n        isGloballyMuted = muted;\n    }\n};\nexport function updateMusic(dt) {\n    if (!musicInitialized) return;\n    \n    // If globally muted, fade out all tracks and do nothing else\n    if (isGloballyMuted) {\n        if (music1.volume \u003e 0) music1.volume = Math.max(0, music1.volume - (1 / FADE_TIME) * dt);\n        if (music2.volume \u003e 0) music2.volume = Math.max(0, music2.volume - (1 / FADE_TIME) * dt);\n        return;\n    }\n    // Determine which track should be playing\n    desiredTrack = activeZombies.length \u003e= INTENSITY_THRESHOLD ? music2 : music1;\n    // Fade logic\n    if (activeTrack !== desiredTrack) {\n        // Fade out the active track\n        if (activeTrack.volume \u003e 0) {\n            activeTrack.volume = Math.max(0, activeTrack.volume - (1 / FADE_TIME) * dt);\n        }\n        // When faded out, switch active track\n        if (activeTrack.volume === 0) {\n            activeTrack = desiredTrack;\n        }\n    }\n    // Fade in the new active track\n    if (activeTrack.volume \u003c 0.5) { // Max volume set to 0.5\n        activeTrack.volume = Math.min(0.5, activeTrack.volume + (1 / FADE_TIME) * dt);\n    }\n}"])